# Test package every time

name: Make env

# Controls when the action will run.

# Trigger this code when a new release is published
on:
  workflow_dispatch:
  release:
    types: [ created ]
  pull_request:
  push:
    branches:
      - master

jobs:
  build:
    name: ${{ matrix.install }} ${{matrix.installer}}-env on (py${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      installer: ${{ matrix.installer }}
    strategy:
      fail-fast: false
      matrix:
        install: [optim_tools, fast]
        installer: [miniforge]
        os: [ubuntu-latest, ubuntu-20.04]
        python-version: ['3.8', '3.9', '3.10']
        shouldSkipConda:
          - ${{ github.event_name == 'pull_request'}}

        exclude:
          # Conda takes a long time, only do it when the PR is merged
          - installer: conda
            os: ubuntu-latest

          # This one oddly takes a long time since #75?!
          - installer: conda
            install: fast

          # Temporary to save computing power
          - python-version: 3.9

          - python-version: "3.10"
    defaults:
      run:
        # This is needed otherwise we can't activate the conda installation
        shell: bash -l {0}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        if: matrix.installer == 'mamba'
        with:
            miniforge-variant: Mambaforge
            miniforge-version: latest
            use-mamba: true
            auto-update-conda: true
            python-version: ${{ matrix.python-version }}
            activate-environment: 'synda'
            mamba-version: '*'
      - uses: conda-incubator/setup-miniconda@v3
        if: matrix.installer == 'miniforge'
        with:
            installer-url: https://github.com/conda-forge/miniforge/releases/download/24.9.2-0/Miniforge3-24.9.2-0-Linux-x86_64.sh
            allow-softlinks: true
            show-channel-urls: true
            use-only-tar-bz2: true
            auto-update-conda: true
            python-version: ${{ matrix.python-version }}
            activate-environment: 'synda'
      - uses: conda-incubator/setup-miniconda@v3
        if: matrix.installer == 'conda'
        with:
            auto-update-conda: true
            python-version: ${{ matrix.python-version }}
            activate-environment: 'synda'
      - name: run install
        if: matrix.install == 'optim_tools'
        run:
          |
            bash install_software.sh --installer $installer
      - name: run install
        if: matrix.install == 'fast'
        run:
          |
            bash install_software.sh --no_synda --no_cdo --installer $installer
      - name: run tests
        run:
          |
          pytest test
      - name: run optim_tools-tests
        if: matrix.install == 'optim_tools'
        run:
            |
            git clone https://github.com/JoranAngevaare/optim_esm_tools.git ../oet
            bash ../oet/.github/scripts/install_tex.sh
            pip install -e ../oet
            python -c "import optim_esm_tools as oet; oet.utils.print_versions(); print('import cartopy'); import cartopy; print('setup map'); oet.plotting.plot.setup_map(); print('done'); oet.utils.print_versions('shapely cartopy urllib'.split())"
            pytest -vx ../oet --durations 0
      - name: List packages
        run:
           |
           conda list
           echo 'Pip freeze'
           pip freeze
